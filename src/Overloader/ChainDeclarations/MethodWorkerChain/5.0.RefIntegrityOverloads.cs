using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Overloader.ChainDeclarations.MethodWorkerChain.ChainUtils;
using Overloader.Enums;
using Overloader.Exceptions;
using Overloader.Models;
using Overloader.Utils;

namespace Overloader.ChainDeclarations.MethodWorkerChain;

public sealed class RefIntegrityOverloads : IChainMember
{
	ChainAction IChainMember.Execute(GeneratorProperties props, SyntaxNode syntaxNode)
	{
		if (props.Store.OverloadMap is null
		    || !props.Store.IsSmthChanged)
			return ChainAction.NextMember;

		var entry = (MethodDeclarationSyntax) syntaxNode;
		var parameters = entry.ParameterList.Parameters;
		
		if (parameters.Count == 0) return ChainAction.NextMember;

		Span<sbyte> maxTransitionsCount = stackalloc sbyte[parameters.Count];
		Span<sbyte> transitionIndexes = stackalloc sbyte[parameters.Count];
		for (int index = 0; index < parameters.Count; index++)
		{
			var parameter = parameters[index];
			transitionIndexes[index] = -1;
			
			if (parameter.Modifiers.Any(modifier =>
				    modifier.IsKind(SyntaxKind.InKeyword)
				    || modifier.IsKind(SyntaxKind.RefKeyword)
				    || modifier.IsKind(SyntaxKind.OutKeyword))) continue;
			
			foreach (var attributeList in parameter.AttributeLists)
			foreach (var attribute in attributeList.Attributes)
			{
				if (attribute.Name.GetName() is not nameof(Ref)) continue;
				maxTransitionsCount[index] = 1;
			}
		}
		
		// Check that ref attribute exists
		for (int index = 0;;)
		{
			if (maxTransitionsCount[index] != 0)
			{
				// Skip first, because it was generated by IntegrityOverload
				transitionIndexes[index] = 0;
				break;
			}

			if (++index == maxTransitionsCount.Length) return ChainAction.NextMember;
		}
		
		for (;;)
		{
			props.Builder
				.AppendChainMemberNameComment(nameof(RefIntegrityOverloads))
				.AppendMethodDeclarationSpecifics(entry, props.Store.MethodData)
				.Append("(");
			
			for (int index = 0;;)
			{
				var mappedParam = props.Store.OverloadMap[index];
				var parameter = parameters[index];
				
				if (transitionIndexes[index] != -1)
					parameter = parameter.WithModifiers(parameter.Modifiers.Add(SyntaxFactory.Token(SyntaxKind.RefKeyword)));

				switch (mappedParam.ParameterAction)
				{
					case ParameterAction.Nothing:
						props.Builder.Append(parameter.ToFullString());
						break;
					case ParameterAction.SimpleReplacement:
					case ParameterAction.CustomReplacement:
						props.Builder.AppendParameter(parameter, mappedParam, props.Compilation);
						break;
					case ParameterAction.FormatterIntegrityReplacement:
					case ParameterAction.FormatterReplacement:
						props.Builder.AppendIntegrityParam(props, mappedParam, parameter);
						break;
					default:
						throw new ArgumentException($"Can't find case for {props.Store.OverloadMap[index]} parameterAction.")
							.WithLocation(entry);
				}

				if (++index == parameters.Count) break;
				props.Builder.AppendWoTrim(", ");
			}
			
			props.Builder
				.AppendWith(")", " ")
				.Append(entry.ConstraintClauses.ToString());
			props.WriteMethodBody(entry, Array.Empty<(string, string)>());
			
			/*
				0 0 0 0 0
				^

				1 0 0 0 0
				^
				Repeat until it < maxLength[index]
				And when first value equals maxLength[index] reset to zero and add 1 to next rank
				0 1 0 0 0
				^
				
				1 1 0 0 0
				^
				And so on...
			 */
			for (int index = 0;;)
			{
				if (transitionIndexes[index] != maxTransitionsCount[index]
				    && ++transitionIndexes[index] != maxTransitionsCount[index]) break;
				transitionIndexes[index] = -1;

				if (++index == transitionIndexes.Length)
					return ChainAction.NextMember;
			}
		}
	}
}
